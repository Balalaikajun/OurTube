version: "3.9"

services:
  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"   # MinIO API
      - "9090:9090"   # MinIO Web UI
    environment:
      MINIO_ROOT_USER: ${MinIO__AccessKey}
      MINIO_ROOT_PASSWORD: ${MinIO__SecretKey}
      MINIO_SERVER_URL: "http://minio:9000"
      MINIO_BROWSER_REDIRECT_URL: "http://localhost:9090"
    command: server /data --console-address ":9090"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17.4
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ourtube:
    build:
      context: ..
      dockerfile: ./infrastructure/Dockerfile
      args:
        VITE_API_BASE_URL: "/api"
        VITE_MINIO_BASE_URL: "http://localhost:9000"
    container_name: ourtube
    ports:
      - "80:8080"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      AllowedHosts: ${ALLOWED_HOSTS}
      Cors__AllowedOrigins: "http://${DOMAIN}"
      ConnectionStrings__DefaultConnection: ${CONNECTION_STRING}
      SMTP__Server: ${SMTP__Server}
      SMTP__Port: ${SMTP__Port}
      SMTP__Email: ${SMTP__Email}
      SMTP__Password: ${SMTP__Password}
      Minio__AccessKey: ${MinIO__AccessKey}
      Minio__SecretKey: ${MinIO__SecretKey}
      Minio__Endpoint: ${MinIO__Endpoint}
      Minio__VideoBucket: ${MinIO__VideoBucket}
      Minio__UserBucket: ${MinIO__UserBucket}
      FFmpeg__ExecutablesPath: ${FFmpeg__ExecutablesPath}
    volumes:
      - data-protection-keys:/root/.aspnet/DataProtection-Keys
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

volumes:
  minio_data:
  postgres_data:
  data-protection-keys:
